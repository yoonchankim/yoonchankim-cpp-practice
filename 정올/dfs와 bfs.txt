#include <cstdio>
#include <vector>
#include <queue>
#include <cstring>
#include <algorithm>
using namespace std;

vector <int> a[1001]; //정점 개수 만큼 벡터로 2차원 배열 생성 -> 1001개의 열을 생성 scanf() 로 행을 채운다.
bool check[1001]; //해당 노드 방문했는 지 체크, 갔으면 true, 안 갔으면 false

void dfs(int node){ //dfs 만들기 , node -> 어떤 정점에서 시작할지
    check[node] = true; // 방문한 node는 true
    printf("%d ",node);
    for(int i=0; i<a[node].size(); i++){ //전체 노드 개수만큼 실행
        int next = a[node][i]; //다음 갈 곳은 a[node][i] 번째, i=0이면, 1->2 이므로, next = 2;
        if(check[next] == false) //안 간곳이라면,
            dfs(next);           // 쭉 따라서 가자
    }
}

void bfs(int start){ //시작점부터 bfs 시작!
    queue <int> q;   //큐 생성
    memset(check, false, sizeof(check)); //dfs에서 체크를 사용했으므로, 0으로 초기화
    check[start] = true;  //시작점 방문했으니 check
    q.push(start);         //큐에 start 넣고 시작
    while(!q.empty()){     //.empty() 는 비어있으면 1, 아니면 0, -> !empty() 비면 0, 아니면 1
        int node = q.front();  //맨 앞에 start -> node라 하고
        q.pop();                //일단 제거
        printf("%d ",node);      //node 출력
        for(int i=0; i<a[node].size(); i++){ //전체 노드 개수만큼 반복
            int next = a[node][i];     //해당 노드가 갈 수 있는 정점 0번부터 next라 하자
            if(check[next]==false){    //next 정점을 간적이 없으면
                check[next] = true;     //갔다고 표시
                q.push(next);           //큐에 넥스트 넣자! ex 1->2 , 1->3 , 1->4 , 1-2-3-4 이미 사이즈인 4 반복함. 빌때까지 출력만 한다.
            }
        }
    }
}

int main()
{
    int n,m,start; //노드 개수, 간선 개수, 시작점
    scanf("%d %d %d",&n,&m,&start);

    for(int i=0; i<m; i++){
        int u,v; //u출발노드 v도착노드
        scanf("%d %d",&u, &v);
        a[u].push_back(v); // 1->2 간다고 담자
        a[v].push_back(u); // 방문하다가 빽도하기 위해 역순도 담자!
    }
    //1 2
   //a[1][0] = 2;
   //a[2][0] = 1;
   //1 3
   //a[1][1] = 3;
   //a[3][0] = 1;
   //1 4
   //a[1][2] = 4;
   //a[4][0] = 1;
   //2 4
   //a[2][0] = 4;
   //a[4][1] = 2;
   //3 4
   //a[3][1] = 4;
   //a[4][2] = 3;

    printf("dfs : ");
    dfs(start);
    printf("\n bfs: ");
    bfs(start);
    printf("\n");

    return 0;
}
